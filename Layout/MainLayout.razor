@inherits LayoutComponentBase
@inject ILocalStorageService localStorage

@* Required *@
<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
@* Needed for dialogs *@
<MudDialogProvider />
@* Needed for snackbars *@
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1" Class="mud-theme-primary">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <a href="/" class="mud-toolbar mud-toolbar-appbar logo-link">
            <img src="/logo.png" class="logo-img" />
        </a>
        @* <MudText Typo="Typo.h5" Class="ml-3">Application</MudText> *@
        <MudSpacer />
        <MudMenu ActivationEvent="MouseEvent.LeftClick" Color="Color.Primary">
            <ActivatorContent>
                <MudChip T="string" Icon="@Icons.Material.Filled.CurrencyExchange" Color="Color.Primary">@selectedCurrency</MudChip>
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem OnClick="@(async () => await SetCurrency(CurrencyCode.INR))">INR - Indian Rupee</MudMenuItem>
                <MudMenuItem OnClick="@(async () => await SetCurrency(CurrencyCode.USD))">USD - US Dollar</MudMenuItem>
                <MudMenuItem OnClick="@(async () => await SetCurrency(CurrencyCode.EUR))">EUR - Euro</MudMenuItem>
                <MudMenuItem OnClick="@(async () => await SetCurrency(CurrencyCode.GBP))">GBP - British Pound</MudMenuItem>
                <!-- Add more currencies as needed -->
            </ChildContent>
        </MudMenu>
        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />
        @* <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" /> *@
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent Class="mt-16 pa-4">
        @Body
    </MudMainContent>
</MudLayout>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode = false;
    private MudTheme? _theme = null;
    private CurrencyCode selectedCurrency;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _theme = new()
            {
                PaletteLight = _lightPalette,
                PaletteDark = _darkPalette,
                LayoutProperties = new LayoutProperties()
            };

        await currencyService.InitializeAsync();
        // Fetch the saved currency from local storage on initialization
        var storedCurrency = await localStorage.GetItemAsync<string>("selectedCurrency");
        if (!string.IsNullOrEmpty(storedCurrency) && Enum.TryParse<CurrencyCode>(storedCurrency, out var currency))
        {
            selectedCurrency = currency;
        }
        else
        {
            // Default to INR if nothing is found in local storage
            selectedCurrency = CurrencyCode.INR;
        }
    }

    // General method to set currency and handle the change
    private async Task SetCurrency(CurrencyCode currency)
    {
        selectedCurrency = currency;

        await currencyService.SetCurrency(currency);
        // Optionally, refresh or update any UI elements
        StateHasChanged();
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    private readonly PaletteLight _lightPalette = new()
        {
            Black = "#110e2d",
            AppbarText = "#424242",
            AppbarBackground = "rgba(255,255,255,0.8)",
            DrawerBackground = "#ffffff",
            GrayLight = "#e8e8e8",
            GrayLighter = "#f9f9f9",
        };

    private readonly PaletteDark _darkPalette = new()
        {
            Primary = "#7e6fff",
            Surface = "#1e1e2d",
            Background = "#1a1a27",
            BackgroundGray = "#151521",
            AppbarText = "#92929f",
            AppbarBackground = "rgba(26,26,39,0.8)",
            DrawerBackground = "#1a1a27",
            ActionDefault = "#74718e",
            ActionDisabled = "#9999994d",
            ActionDisabledBackground = "#605f6d4d",
            TextPrimary = "#b2b0bf",
            TextSecondary = "#92929f",
            TextDisabled = "#ffffff33",
            DrawerIcon = "#92929f",
            DrawerText = "#92929f",
            GrayLight = "#2a2833",
            GrayLighter = "#1e1e2d",
            Info = "#4a86ff",
            Success = "#3dcb6c",
            Warning = "#ffb545",
            Error = "#ff3f5f",
            LinesDefault = "#33323e",
            TableLines = "#33323e",
            Divider = "#292838",
            OverlayLight = "#1e1e2d80",
        };

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };
}


@* <MudLayout>
    <MudAppBar>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />

    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Medium">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout> *@

@* @code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
} *@

@* <div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            &nbsp;
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>
 *@